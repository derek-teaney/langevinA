{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "thirty-spending",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os \n",
    "import subprocess\n",
    "import random\n",
    "import matplotlib as mpl \n",
    "import matplotlib.pyplot as plt \n",
    "import h5py\n",
    "from ipywidgets import interact, interactive, fixed, interact_manual\n",
    "import numpy as np\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "random.seed()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cellular-theater",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    \"H\" : 0.01,\n",
    "\t\"NX\" : 16,\n",
    "\t\"NY\" : 16,\n",
    "\t\"NZ\" : 16,\n",
    "    \"LX\" : 1.,\n",
    "    \"LY\" : 1.,\n",
    "    \"LZ\" : 1.,\n",
    "    \"Ndof\": 4,\n",
    "    \"finaltime\" : 20,\n",
    "    \"intialtime\" : 0,\n",
    "    \"deltat\"     : 0.01,\n",
    "    \"mass\"  : -10,\n",
    "    \"lambda \" : 5,\n",
    "    \"gamma\"   : 1,\n",
    "\t\"seed\" : 1\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "union-understanding",
   "metadata": {},
   "outputs": [],
   "source": [
    "def addoption(opt, value,opts):\n",
    "    key=\"-o4_data_\" + opt\n",
    "    sval=str(value)\n",
    "    opts.extend([key,sval])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "warming-hayes",
   "metadata": {},
   "outputs": [],
   "source": [
    "run"
   ]
  },
  {
   "cell_type": "raw",
   "id": "optimum-shuttle",
   "metadata": {},
   "source": [
    "run([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "million-prospect",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "found-cinema",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mpicxx -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -g   -std=c++14  -I/Users/eduardogrossi/pets/arch-darwin-c-debug/include -I/Users/eduardogrossi/pets/include -I/usr/local/Cellar/gsl/2.6/include  -c -o ModelA-Beuler.o ModelA-Beuler.cxx\n",
      "mpicxx -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -g   -std=c++14  -I/Users/eduardogrossi/pets/arch-darwin-c-debug/include -I/Users/eduardogrossi/pets/include -I/usr/local/Cellar/gsl/2.6/include -L/Users/eduardogrossi/pets/arch-darwin-c-debug/lib -L/usr/local/Cellar/gsl/2.6/lib  -Wl,-rpath,/Users/eduardogrossi/pets/arch-darwin-c-debug/lib  -Wl,-rpath,/usr/local/Cellar/gsl/2.6/lib  -o ModelA-Beuler.exe ModelA-Beuler.o -lpetsc -lgsl -lgslcblas -lm -lm -lstdc++\n"
     ]
    }
   ],
   "source": [
    "!make"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "working-starter",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NX = 16\n",
      "NY = 16\n",
      "NZ = 16\n",
      "hX = 6.666667e-02\n",
      "hY = 6.666667e-02\n",
      "hZ = 6.666667e-02\n",
      "initialtime = 0.000000e+00\n",
      "finaltime = 5.000000e+00\n",
      "delta t  = 1.000000e-02\n",
      "seed = 10\n",
      "m2 = -1.000000e+01\n",
      "lambda = 1.000000e+01\n",
      "H = 0.000000e+00\n",
      "filename = o4output\n",
      "Timestep 1: step size = 0.01, time = 0.\n",
      "Timestep 2: step size = 0.01, time = 0.01\n",
      "Timestep 3: step size = 0.01, time = 0.02\n",
      "Timestep 4: step size = 0.01, time = 0.03\n",
      "Timestep 5: step size = 0.01, time = 0.04\n",
      "Timestep 6: step size = 0.01, time = 0.05\n",
      "Timestep 7: step size = 0.01, time = 0.06\n",
      "Timestep 8: step size = 0.01, time = 0.07\n",
      "Timestep 9: step size = 0.01, time = 0.08\n",
      "Timestep 10: step size = 0.01, time = 0.09\n",
      "Timestep 11: step size = 0.01, time = 0.1\n",
      "Timestep 12: step size = 0.01, time = 0.11\n",
      "Timestep 13: step size = 0.01, time = 0.12\n",
      "Timestep 14: step size = 0.01, time = 0.13\n",
      "Timestep 15: step size = 0.01, time = 0.14\n",
      "Timestep 16: step size = 0.01, time = 0.15\n",
      "Timestep 17: step size = 0.01, time = 0.16\n",
      "Timestep 18: step size = 0.01, time = 0.17\n",
      "Timestep 19: step size = 0.01, time = 0.18\n",
      "Timestep 20: step size = 0.01, time = 0.19\n",
      "Timestep 21: step size = 0.01, time = 0.2\n",
      "Timestep 22: step size = 0.01, time = 0.21\n",
      "Timestep 23: step size = 0.01, time = 0.22\n",
      "Timestep 24: step size = 0.01, time = 0.23\n",
      "Timestep 25: step size = 0.01, time = 0.24\n",
      "Timestep 26: step size = 0.01, time = 0.25\n",
      "Timestep 27: step size = 0.01, time = 0.26\n",
      "Timestep 28: step size = 0.01, time = 0.27\n",
      "Timestep 29: step size = 0.01, time = 0.28\n",
      "Timestep 30: step size = 0.01, time = 0.29\n",
      "Timestep 31: step size = 0.01, time = 0.3\n",
      "Timestep 32: step size = 0.01, time = 0.31\n",
      "Timestep 33: step size = 0.01, time = 0.32\n",
      "Timestep 34: step size = 0.01, time = 0.33\n",
      "Timestep 35: step size = 0.01, time = 0.34\n",
      "Timestep 36: step size = 0.01, time = 0.35\n",
      "Timestep 37: step size = 0.01, time = 0.36\n",
      "Timestep 38: step size = 0.01, time = 0.37\n",
      "Timestep 39: step size = 0.01, time = 0.38\n",
      "Timestep 40: step size = 0.01, time = 0.39\n",
      "Timestep 41: step size = 0.01, time = 0.4\n",
      "Timestep 42: step size = 0.01, time = 0.41\n",
      "Timestep 43: step size = 0.01, time = 0.42\n",
      "Timestep 44: step size = 0.01, time = 0.43\n",
      "Timestep 45: step size = 0.01, time = 0.44\n",
      "Timestep 46: step size = 0.01, time = 0.45\n",
      "Timestep 47: step size = 0.01, time = 0.46\n",
      "Timestep 48: step size = 0.01, time = 0.47\n",
      "Timestep 49: step size = 0.01, time = 0.48\n",
      "Timestep 50: step size = 0.01, time = 0.49\n",
      "Timestep 51: step size = 0.01, time = 0.5\n",
      "Timestep 52: step size = 0.01, time = 0.51\n",
      "Timestep 53: step size = 0.01, time = 0.52\n",
      "Timestep 54: step size = 0.01, time = 0.53\n",
      "Timestep 55: step size = 0.01, time = 0.54\n",
      "Timestep 56: step size = 0.01, time = 0.55\n",
      "Timestep 57: step size = 0.01, time = 0.56\n",
      "Timestep 58: step size = 0.01, time = 0.57\n",
      "Timestep 59: step size = 0.01, time = 0.58\n",
      "Timestep 60: step size = 0.01, time = 0.59\n",
      "Timestep 61: step size = 0.01, time = 0.6\n",
      "Timestep 62: step size = 0.01, time = 0.61\n",
      "Timestep 63: step size = 0.01, time = 0.62\n",
      "Timestep 64: step size = 0.01, time = 0.63\n",
      "Timestep 65: step size = 0.01, time = 0.64\n",
      "Timestep 66: step size = 0.01, time = 0.65\n",
      "Timestep 67: step size = 0.01, time = 0.66\n",
      "Timestep 68: step size = 0.01, time = 0.67\n",
      "Timestep 69: step size = 0.01, time = 0.68\n",
      "Timestep 70: step size = 0.01, time = 0.69\n",
      "Timestep 71: step size = 0.01, time = 0.7\n",
      "Timestep 72: step size = 0.01, time = 0.71\n",
      "Timestep 73: step size = 0.01, time = 0.72\n",
      "Timestep 74: step size = 0.01, time = 0.73\n",
      "Timestep 75: step size = 0.01, time = 0.74\n",
      "Timestep 76: step size = 0.01, time = 0.75\n",
      "Timestep 77: step size = 0.01, time = 0.76\n",
      "Timestep 78: step size = 0.01, time = 0.77\n",
      "Timestep 79: step size = 0.01, time = 0.78\n",
      "Timestep 80: step size = 0.01, time = 0.79\n",
      "Timestep 81: step size = 0.01, time = 0.8\n",
      "Timestep 82: step size = 0.01, time = 0.81\n",
      "Timestep 83: step size = 0.01, time = 0.82\n",
      "Timestep 84: step size = 0.01, time = 0.83\n",
      "Timestep 85: step size = 0.01, time = 0.84\n",
      "Timestep 86: step size = 0.01, time = 0.85\n",
      "Timestep 87: step size = 0.01, time = 0.86\n",
      "Timestep 88: step size = 0.01, time = 0.87\n",
      "Timestep 89: step size = 0.01, time = 0.88\n",
      "Timestep 90: step size = 0.01, time = 0.89\n",
      "Timestep 91: step size = 0.01, time = 0.9\n",
      "Timestep 92: step size = 0.01, time = 0.91\n",
      "Timestep 93: step size = 0.01, time = 0.92\n",
      "Timestep 94: step size = 0.01, time = 0.93\n",
      "Timestep 95: step size = 0.01, time = 0.94\n",
      "Timestep 96: step size = 0.01, time = 0.95\n",
      "Timestep 97: step size = 0.01, time = 0.96\n",
      "Timestep 98: step size = 0.01, time = 0.97\n",
      "Timestep 99: step size = 0.01, time = 0.98\n",
      "Timestep 100: step size = 0.01, time = 0.99\n",
      "Timestep 101: step size = 0.01, time = 1.\n",
      "Timestep 102: step size = 0.01, time = 1.01\n",
      "Timestep 103: step size = 0.01, time = 1.02\n",
      "Timestep 104: step size = 0.01, time = 1.03\n",
      "Timestep 105: step size = 0.01, time = 1.04\n",
      "Timestep 106: step size = 0.01, time = 1.05\n",
      "Timestep 107: step size = 0.01, time = 1.06\n",
      "Timestep 108: step size = 0.01, time = 1.07\n",
      "Timestep 109: step size = 0.01, time = 1.08\n",
      "Timestep 110: step size = 0.01, time = 1.09\n",
      "Timestep 111: step size = 0.01, time = 1.1\n",
      "Timestep 112: step size = 0.01, time = 1.11\n",
      "Timestep 113: step size = 0.01, time = 1.12\n",
      "Timestep 114: step size = 0.01, time = 1.13\n",
      "Timestep 115: step size = 0.01, time = 1.14\n",
      "Timestep 116: step size = 0.01, time = 1.15\n",
      "Timestep 117: step size = 0.01, time = 1.16\n",
      "Timestep 118: step size = 0.01, time = 1.17\n",
      "Timestep 119: step size = 0.01, time = 1.18\n",
      "Timestep 120: step size = 0.01, time = 1.19\n",
      "Timestep 121: step size = 0.01, time = 1.2\n",
      "Timestep 122: step size = 0.01, time = 1.21\n",
      "Timestep 123: step size = 0.01, time = 1.22\n",
      "Timestep 124: step size = 0.01, time = 1.23\n",
      "Timestep 125: step size = 0.01, time = 1.24\n",
      "Timestep 126: step size = 0.01, time = 1.25\n",
      "Timestep 127: step size = 0.01, time = 1.26\n",
      "Timestep 128: step size = 0.01, time = 1.27\n",
      "Timestep 129: step size = 0.01, time = 1.28\n",
      "Timestep 130: step size = 0.01, time = 1.29\n",
      "Timestep 131: step size = 0.01, time = 1.3\n",
      "Timestep 132: step size = 0.01, time = 1.31\n",
      "Timestep 133: step size = 0.01, time = 1.32\n",
      "Timestep 134: step size = 0.01, time = 1.33\n",
      "Timestep 135: step size = 0.01, time = 1.34\n",
      "Timestep 136: step size = 0.01, time = 1.35\n",
      "Timestep 137: step size = 0.01, time = 1.36\n",
      "Timestep 138: step size = 0.01, time = 1.37\n",
      "Timestep 139: step size = 0.01, time = 1.38\n",
      "Timestep 140: step size = 0.01, time = 1.39\n",
      "Timestep 141: step size = 0.01, time = 1.4\n",
      "Timestep 142: step size = 0.01, time = 1.41\n",
      "Timestep 143: step size = 0.01, time = 1.42\n",
      "Timestep 144: step size = 0.01, time = 1.43\n",
      "Timestep 145: step size = 0.01, time = 1.44\n",
      "Timestep 146: step size = 0.01, time = 1.45\n",
      "Timestep 147: step size = 0.01, time = 1.46\n",
      "Timestep 148: step size = 0.01, time = 1.47\n",
      "Timestep 149: step size = 0.01, time = 1.48\n",
      "Timestep 150: step size = 0.01, time = 1.49\n",
      "Timestep 151: step size = 0.01, time = 1.5\n",
      "Timestep 152: step size = 0.01, time = 1.51\n",
      "Timestep 153: step size = 0.01, time = 1.52\n",
      "Timestep 154: step size = 0.01, time = 1.53\n",
      "Timestep 155: step size = 0.01, time = 1.54\n",
      "Timestep 156: step size = 0.01, time = 1.55\n",
      "Timestep 157: step size = 0.01, time = 1.56\n",
      "Timestep 158: step size = 0.01, time = 1.57\n",
      "Timestep 159: step size = 0.01, time = 1.58\n",
      "Timestep 160: step size = 0.01, time = 1.59\n",
      "Timestep 161: step size = 0.01, time = 1.6\n",
      "Timestep 162: step size = 0.01, time = 1.61\n",
      "Timestep 163: step size = 0.01, time = 1.62\n",
      "Timestep 164: step size = 0.01, time = 1.63\n",
      "Timestep 165: step size = 0.01, time = 1.64\n",
      "Timestep 166: step size = 0.01, time = 1.65\n",
      "Timestep 167: step size = 0.01, time = 1.66\n",
      "Timestep 168: step size = 0.01, time = 1.67\n",
      "Timestep 169: step size = 0.01, time = 1.68\n",
      "Timestep 170: step size = 0.01, time = 1.69\n",
      "Timestep 171: step size = 0.01, time = 1.7\n",
      "Timestep 172: step size = 0.01, time = 1.71\n",
      "Timestep 173: step size = 0.01, time = 1.72\n",
      "Timestep 174: step size = 0.01, time = 1.73\n",
      "Timestep 175: step size = 0.01, time = 1.74\n",
      "Timestep 176: step size = 0.01, time = 1.75\n",
      "Timestep 177: step size = 0.01, time = 1.76\n",
      "Timestep 178: step size = 0.01, time = 1.77\n",
      "Timestep 179: step size = 0.01, time = 1.78\n",
      "Timestep 180: step size = 0.01, time = 1.79\n",
      "Timestep 181: step size = 0.01, time = 1.8\n",
      "Timestep 182: step size = 0.01, time = 1.81\n",
      "Timestep 183: step size = 0.01, time = 1.82\n",
      "Timestep 184: step size = 0.01, time = 1.83\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Timestep 185: step size = 0.01, time = 1.84\n",
      "Timestep 186: step size = 0.01, time = 1.85\n",
      "Timestep 187: step size = 0.01, time = 1.86\n",
      "Timestep 188: step size = 0.01, time = 1.87\n",
      "Timestep 189: step size = 0.01, time = 1.88\n",
      "Timestep 190: step size = 0.01, time = 1.89\n",
      "Timestep 191: step size = 0.01, time = 1.9\n",
      "Timestep 192: step size = 0.01, time = 1.91\n",
      "Timestep 193: step size = 0.01, time = 1.92\n",
      "Timestep 194: step size = 0.01, time = 1.93\n",
      "Timestep 195: step size = 0.01, time = 1.94\n",
      "Timestep 196: step size = 0.01, time = 1.95\n",
      "Timestep 197: step size = 0.01, time = 1.96\n",
      "Timestep 198: step size = 0.01, time = 1.97\n",
      "Timestep 199: step size = 0.01, time = 1.98\n",
      "Timestep 200: step size = 0.01, time = 1.99\n",
      "Timestep 201: step size = 0.01, time = 2.\n",
      "Timestep 202: step size = 0.01, time = 2.01\n",
      "Timestep 203: step size = 0.01, time = 2.02\n",
      "Timestep 204: step size = 0.01, time = 2.03\n",
      "Timestep 205: step size = 0.01, time = 2.04\n",
      "Timestep 206: step size = 0.01, time = 2.05\n",
      "Timestep 207: step size = 0.01, time = 2.06\n",
      "Timestep 208: step size = 0.01, time = 2.07\n",
      "Timestep 209: step size = 0.01, time = 2.08\n",
      "Timestep 210: step size = 0.01, time = 2.09\n",
      "Timestep 211: step size = 0.01, time = 2.1\n",
      "Timestep 212: step size = 0.01, time = 2.11\n",
      "Timestep 213: step size = 0.01, time = 2.12\n",
      "Timestep 214: step size = 0.01, time = 2.13\n",
      "Timestep 215: step size = 0.01, time = 2.14\n",
      "Timestep 216: step size = 0.01, time = 2.15\n",
      "Timestep 217: step size = 0.01, time = 2.16\n",
      "Timestep 218: step size = 0.01, time = 2.17\n",
      "Timestep 219: step size = 0.01, time = 2.18\n",
      "Timestep 220: step size = 0.01, time = 2.19\n",
      "Timestep 221: step size = 0.01, time = 2.2\n",
      "Timestep 222: step size = 0.01, time = 2.21\n",
      "Timestep 223: step size = 0.01, time = 2.22\n",
      "Timestep 224: step size = 0.01, time = 2.23\n",
      "Timestep 225: step size = 0.01, time = 2.24\n",
      "Timestep 226: step size = 0.01, time = 2.25\n",
      "Timestep 227: step size = 0.01, time = 2.26\n",
      "Timestep 228: step size = 0.01, time = 2.27\n",
      "Timestep 229: step size = 0.01, time = 2.28\n",
      "Timestep 230: step size = 0.01, time = 2.29\n",
      "Timestep 231: step size = 0.01, time = 2.3\n",
      "Timestep 232: step size = 0.01, time = 2.31\n",
      "Timestep 233: step size = 0.01, time = 2.32\n",
      "Timestep 234: step size = 0.01, time = 2.33\n",
      "Timestep 235: step size = 0.01, time = 2.34\n",
      "Timestep 236: step size = 0.01, time = 2.35\n",
      "Timestep 237: step size = 0.01, time = 2.36\n",
      "Timestep 238: step size = 0.01, time = 2.37\n",
      "Timestep 239: step size = 0.01, time = 2.38\n",
      "Timestep 240: step size = 0.01, time = 2.39\n",
      "Timestep 241: step size = 0.01, time = 2.4\n",
      "Timestep 242: step size = 0.01, time = 2.41\n",
      "Timestep 243: step size = 0.01, time = 2.42\n",
      "Timestep 244: step size = 0.01, time = 2.43\n",
      "Timestep 245: step size = 0.01, time = 2.44\n",
      "Timestep 246: step size = 0.01, time = 2.45\n",
      "Timestep 247: step size = 0.01, time = 2.46\n",
      "Timestep 248: step size = 0.01, time = 2.47\n",
      "Timestep 249: step size = 0.01, time = 2.48\n",
      "Timestep 250: step size = 0.01, time = 2.49\n",
      "Timestep 251: step size = 0.01, time = 2.5\n",
      "Timestep 252: step size = 0.01, time = 2.51\n",
      "Timestep 253: step size = 0.01, time = 2.52\n",
      "Timestep 254: step size = 0.01, time = 2.53\n",
      "Timestep 255: step size = 0.01, time = 2.54\n",
      "Timestep 256: step size = 0.01, time = 2.55\n",
      "Timestep 257: step size = 0.01, time = 2.56\n",
      "Timestep 258: step size = 0.01, time = 2.57\n",
      "Timestep 259: step size = 0.01, time = 2.58\n",
      "Timestep 260: step size = 0.01, time = 2.59\n",
      "Timestep 261: step size = 0.01, time = 2.6\n",
      "Timestep 262: step size = 0.01, time = 2.61\n",
      "Timestep 263: step size = 0.01, time = 2.62\n",
      "Timestep 264: step size = 0.01, time = 2.63\n",
      "Timestep 265: step size = 0.01, time = 2.64\n",
      "Timestep 266: step size = 0.01, time = 2.65\n",
      "Timestep 267: step size = 0.01, time = 2.66\n",
      "Timestep 268: step size = 0.01, time = 2.67\n",
      "Timestep 269: step size = 0.01, time = 2.68\n",
      "Timestep 270: step size = 0.01, time = 2.69\n",
      "Timestep 271: step size = 0.01, time = 2.7\n",
      "Timestep 272: step size = 0.01, time = 2.71\n",
      "Timestep 273: step size = 0.01, time = 2.72\n",
      "Timestep 274: step size = 0.01, time = 2.73\n",
      "Timestep 275: step size = 0.01, time = 2.74\n",
      "Timestep 276: step size = 0.01, time = 2.75\n",
      "Timestep 277: step size = 0.01, time = 2.76\n",
      "Timestep 278: step size = 0.01, time = 2.77\n",
      "Timestep 279: step size = 0.01, time = 2.78\n",
      "Timestep 280: step size = 0.01, time = 2.79\n",
      "Timestep 281: step size = 0.01, time = 2.8\n",
      "Timestep 282: step size = 0.01, time = 2.81\n",
      "Timestep 283: step size = 0.01, time = 2.82\n",
      "Timestep 284: step size = 0.01, time = 2.83\n",
      "Timestep 285: step size = 0.01, time = 2.84\n",
      "Timestep 286: step size = 0.01, time = 2.85\n",
      "Timestep 287: step size = 0.01, time = 2.86\n",
      "Timestep 288: step size = 0.01, time = 2.87\n",
      "Timestep 289: step size = 0.01, time = 2.88\n",
      "Timestep 290: step size = 0.01, time = 2.89\n",
      "Timestep 291: step size = 0.01, time = 2.9\n",
      "Timestep 292: step size = 0.01, time = 2.91\n",
      "Timestep 293: step size = 0.01, time = 2.92\n",
      "Timestep 294: step size = 0.01, time = 2.93\n",
      "Timestep 295: step size = 0.01, time = 2.94\n",
      "Timestep 296: step size = 0.01, time = 2.95\n",
      "Timestep 297: step size = 0.01, time = 2.96\n",
      "Timestep 298: step size = 0.01, time = 2.97\n",
      "Timestep 299: step size = 0.01, time = 2.98\n",
      "Timestep 300: step size = 0.01, time = 2.99\n",
      "Timestep 301: step size = 0.01, time = 3.\n",
      "Timestep 302: step size = 0.01, time = 3.01\n",
      "Timestep 303: step size = 0.01, time = 3.02\n",
      "Timestep 304: step size = 0.01, time = 3.03\n",
      "Timestep 305: step size = 0.01, time = 3.04\n",
      "Timestep 306: step size = 0.01, time = 3.05\n",
      "Timestep 307: step size = 0.01, time = 3.06\n",
      "Timestep 308: step size = 0.01, time = 3.07\n",
      "Timestep 309: step size = 0.01, time = 3.08\n",
      "Timestep 310: step size = 0.01, time = 3.09\n",
      "Timestep 311: step size = 0.01, time = 3.1\n",
      "Timestep 312: step size = 0.01, time = 3.11\n",
      "Timestep 313: step size = 0.01, time = 3.12\n",
      "Timestep 314: step size = 0.01, time = 3.13\n",
      "Timestep 315: step size = 0.01, time = 3.14\n",
      "Timestep 316: step size = 0.01, time = 3.15\n",
      "Timestep 317: step size = 0.01, time = 3.16\n",
      "Timestep 318: step size = 0.01, time = 3.17\n",
      "Timestep 319: step size = 0.01, time = 3.18\n",
      "Timestep 320: step size = 0.01, time = 3.19\n",
      "Timestep 321: step size = 0.01, time = 3.2\n",
      "Timestep 322: step size = 0.01, time = 3.21\n",
      "Timestep 323: step size = 0.01, time = 3.22\n",
      "Timestep 324: step size = 0.01, time = 3.23\n",
      "Timestep 325: step size = 0.01, time = 3.24\n",
      "Timestep 326: step size = 0.01, time = 3.25\n",
      "Timestep 327: step size = 0.01, time = 3.26\n",
      "Timestep 328: step size = 0.01, time = 3.27\n",
      "Timestep 329: step size = 0.01, time = 3.28\n",
      "Timestep 330: step size = 0.01, time = 3.29\n",
      "Timestep 331: step size = 0.01, time = 3.3\n",
      "Timestep 332: step size = 0.01, time = 3.31\n",
      "Timestep 333: step size = 0.01, time = 3.32\n",
      "Timestep 334: step size = 0.01, time = 3.33\n",
      "Timestep 335: step size = 0.01, time = 3.34\n",
      "Timestep 336: step size = 0.01, time = 3.35\n",
      "Timestep 337: step size = 0.01, time = 3.36\n",
      "Timestep 338: step size = 0.01, time = 3.37\n",
      "Timestep 339: step size = 0.01, time = 3.38\n",
      "Timestep 340: step size = 0.01, time = 3.39\n",
      "Timestep 341: step size = 0.01, time = 3.4\n",
      "Timestep 342: step size = 0.01, time = 3.41\n",
      "Timestep 343: step size = 0.01, time = 3.42\n",
      "Timestep 344: step size = 0.01, time = 3.43\n",
      "Timestep 345: step size = 0.01, time = 3.44\n",
      "Timestep 346: step size = 0.01, time = 3.45\n",
      "Timestep 347: step size = 0.01, time = 3.46\n",
      "Timestep 348: step size = 0.01, time = 3.47\n",
      "Timestep 349: step size = 0.01, time = 3.48\n",
      "Timestep 350: step size = 0.01, time = 3.49\n",
      "Timestep 351: step size = 0.01, time = 3.5\n",
      "Timestep 352: step size = 0.01, time = 3.51\n",
      "Timestep 353: step size = 0.01, time = 3.52\n",
      "Timestep 354: step size = 0.01, time = 3.53\n",
      "Timestep 355: step size = 0.01, time = 3.54\n",
      "Timestep 356: step size = 0.01, time = 3.55\n",
      "Timestep 357: step size = 0.01, time = 3.56\n",
      "Timestep 358: step size = 0.01, time = 3.57\n",
      "Timestep 359: step size = 0.01, time = 3.58\n",
      "Timestep 360: step size = 0.01, time = 3.59\n",
      "Timestep 361: step size = 0.01, time = 3.6\n",
      "Timestep 362: step size = 0.01, time = 3.61\n",
      "Timestep 363: step size = 0.01, time = 3.62\n",
      "Timestep 364: step size = 0.01, time = 3.63\n",
      "Timestep 365: step size = 0.01, time = 3.64\n",
      "Timestep 366: step size = 0.01, time = 3.65\n",
      "Timestep 367: step size = 0.01, time = 3.66\n",
      "Timestep 368: step size = 0.01, time = 3.67\n",
      "Timestep 369: step size = 0.01, time = 3.68\n",
      "Timestep 370: step size = 0.01, time = 3.69\n",
      "Timestep 371: step size = 0.01, time = 3.7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Timestep 372: step size = 0.01, time = 3.71\n",
      "Timestep 373: step size = 0.01, time = 3.72\n",
      "Timestep 374: step size = 0.01, time = 3.73\n",
      "Timestep 375: step size = 0.01, time = 3.74\n",
      "Timestep 376: step size = 0.01, time = 3.75\n",
      "Timestep 377: step size = 0.01, time = 3.76\n",
      "Timestep 378: step size = 0.01, time = 3.77\n",
      "Timestep 379: step size = 0.01, time = 3.78\n",
      "Timestep 380: step size = 0.01, time = 3.79\n",
      "Timestep 381: step size = 0.01, time = 3.8\n",
      "Timestep 382: step size = 0.01, time = 3.81\n",
      "Timestep 383: step size = 0.01, time = 3.82\n",
      "Timestep 384: step size = 0.01, time = 3.83\n",
      "Timestep 385: step size = 0.01, time = 3.84\n",
      "Timestep 386: step size = 0.01, time = 3.85\n",
      "Timestep 387: step size = 0.01, time = 3.86\n",
      "Timestep 388: step size = 0.01, time = 3.87\n",
      "Timestep 389: step size = 0.01, time = 3.88\n",
      "Timestep 390: step size = 0.01, time = 3.89\n",
      "Timestep 391: step size = 0.01, time = 3.9\n",
      "Timestep 392: step size = 0.01, time = 3.91\n",
      "Timestep 393: step size = 0.01, time = 3.92\n",
      "Timestep 394: step size = 0.01, time = 3.93\n",
      "Timestep 395: step size = 0.01, time = 3.94\n",
      "Timestep 396: step size = 0.01, time = 3.95\n",
      "Timestep 397: step size = 0.01, time = 3.96\n",
      "Timestep 398: step size = 0.01, time = 3.97\n",
      "Timestep 399: step size = 0.01, time = 3.98\n",
      "Timestep 400: step size = 0.01, time = 3.99\n",
      "Timestep 401: step size = 0.01, time = 4.\n",
      "Timestep 402: step size = 0.01, time = 4.01\n",
      "Timestep 403: step size = 0.01, time = 4.02\n",
      "Timestep 404: step size = 0.01, time = 4.03\n",
      "Timestep 405: step size = 0.01, time = 4.04\n",
      "Timestep 406: step size = 0.01, time = 4.05\n",
      "Timestep 407: step size = 0.01, time = 4.06\n",
      "Timestep 408: step size = 0.01, time = 4.07\n",
      "Timestep 409: step size = 0.01, time = 4.08\n",
      "Timestep 410: step size = 0.01, time = 4.09\n",
      "Timestep 411: step size = 0.01, time = 4.1\n",
      "Timestep 412: step size = 0.01, time = 4.11\n",
      "Timestep 413: step size = 0.01, time = 4.12\n",
      "Timestep 414: step size = 0.01, time = 4.13\n",
      "Timestep 415: step size = 0.01, time = 4.14\n",
      "Timestep 416: step size = 0.01, time = 4.15\n",
      "Timestep 417: step size = 0.01, time = 4.16\n",
      "Timestep 418: step size = 0.01, time = 4.17\n",
      "Timestep 419: step size = 0.01, time = 4.18\n",
      "Timestep 420: step size = 0.01, time = 4.19\n",
      "Timestep 421: step size = 0.01, time = 4.2\n",
      "Timestep 422: step size = 0.01, time = 4.21\n",
      "Timestep 423: step size = 0.01, time = 4.22\n",
      "Timestep 424: step size = 0.01, time = 4.23\n",
      "Timestep 425: step size = 0.01, time = 4.24\n",
      "Timestep 426: step size = 0.01, time = 4.25\n",
      "Timestep 427: step size = 0.01, time = 4.26\n",
      "Timestep 428: step size = 0.01, time = 4.27\n",
      "Timestep 429: step size = 0.01, time = 4.28\n",
      "Timestep 430: step size = 0.01, time = 4.29\n",
      "Timestep 431: step size = 0.01, time = 4.3\n",
      "Timestep 432: step size = 0.01, time = 4.31\n",
      "Timestep 433: step size = 0.01, time = 4.32\n",
      "Timestep 434: step size = 0.01, time = 4.33\n",
      "Timestep 435: step size = 0.01, time = 4.34\n",
      "Timestep 436: step size = 0.01, time = 4.35\n",
      "Timestep 437: step size = 0.01, time = 4.36\n",
      "Timestep 438: step size = 0.01, time = 4.37\n",
      "Timestep 439: step size = 0.01, time = 4.38\n",
      "Timestep 440: step size = 0.01, time = 4.39\n",
      "Timestep 441: step size = 0.01, time = 4.4\n",
      "Timestep 442: step size = 0.01, time = 4.41\n",
      "Timestep 443: step size = 0.01, time = 4.42\n",
      "Timestep 444: step size = 0.01, time = 4.43\n",
      "Timestep 445: step size = 0.01, time = 4.44\n",
      "Timestep 446: step size = 0.01, time = 4.45\n",
      "Timestep 447: step size = 0.01, time = 4.46\n",
      "Timestep 448: step size = 0.01, time = 4.47\n",
      "Timestep 449: step size = 0.01, time = 4.48\n",
      "Timestep 450: step size = 0.01, time = 4.49\n",
      "Timestep 451: step size = 0.01, time = 4.5\n",
      "Timestep 452: step size = 0.01, time = 4.51\n",
      "Timestep 453: step size = 0.01, time = 4.52\n",
      "Timestep 454: step size = 0.01, time = 4.53\n",
      "Timestep 455: step size = 0.01, time = 4.54\n",
      "Timestep 456: step size = 0.01, time = 4.55\n",
      "Timestep 457: step size = 0.01, time = 4.56\n",
      "Timestep 458: step size = 0.01, time = 4.57\n",
      "Timestep 459: step size = 0.01, time = 4.58\n",
      "Timestep 460: step size = 0.01, time = 4.59\n",
      "Timestep 461: step size = 0.01, time = 4.6\n",
      "Timestep 462: step size = 0.01, time = 4.61\n",
      "Timestep 463: step size = 0.01, time = 4.62\n",
      "Timestep 464: step size = 0.01, time = 4.63\n",
      "Timestep 465: step size = 0.01, time = 4.64\n",
      "Timestep 466: step size = 0.01, time = 4.65\n",
      "Timestep 467: step size = 0.01, time = 4.66\n",
      "Timestep 468: step size = 0.01, time = 4.67\n",
      "Timestep 469: step size = 0.01, time = 4.68\n",
      "Timestep 470: step size = 0.01, time = 4.69\n",
      "Timestep 471: step size = 0.01, time = 4.7\n",
      "Timestep 472: step size = 0.01, time = 4.71\n",
      "Timestep 473: step size = 0.01, time = 4.72\n",
      "Timestep 474: step size = 0.01, time = 4.73\n",
      "Timestep 475: step size = 0.01, time = 4.74\n",
      "Timestep 476: step size = 0.01, time = 4.75\n",
      "Timestep 477: step size = 0.01, time = 4.76\n",
      "Timestep 478: step size = 0.01, time = 4.77\n",
      "Timestep 479: step size = 0.01, time = 4.78\n",
      "Timestep 480: step size = 0.01, time = 4.79\n",
      "Timestep 481: step size = 0.01, time = 4.8\n",
      "Timestep 482: step size = 0.01, time = 4.81\n",
      "Timestep 483: step size = 0.01, time = 4.82\n",
      "Timestep 484: step size = 0.01, time = 4.83\n",
      "Timestep 485: step size = 0.01, time = 4.84\n",
      "Timestep 486: step size = 0.01, time = 4.85\n",
      "Timestep 487: step size = 0.01, time = 4.86\n",
      "Timestep 488: step size = 0.01, time = 4.87\n",
      "Timestep 489: step size = 0.01, time = 4.88\n",
      "Timestep 490: step size = 0.01, time = 4.89\n",
      "Timestep 491: step size = 0.01, time = 4.9\n",
      "Timestep 492: step size = 0.01, time = 4.91\n",
      "Timestep 493: step size = 0.01, time = 4.92\n",
      "Timestep 494: step size = 0.01, time = 4.93\n",
      "Timestep 495: step size = 0.01, time = 4.94\n",
      "Timestep 496: step size = 0.01, time = 4.95\n",
      "Timestep 497: step size = 0.01, time = 4.96\n",
      "Timestep 498: step size = 0.01, time = 4.97\n",
      "Timestep 499: step size = 0.01, time = 4.98\n",
      "Timestep 500: step size = 0.01, time = 4.99\n",
      "Timestep 501: step size = 0.01, time = 5.\n"
     ]
    }
   ],
   "source": [
    "!mpiexec -n 1 ModelA-Beuler.exe -o4_data_finaltime 5 -o4_data_H 0.0 -o4_data_mass -10 -o4_data_lambda 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "absent-beast",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Timestepsolution']\n",
      "['<phi>', 'C00', 'C11', 'solution']\n",
      "<HDF5 dataset \"solution\": shape (1, 16, 16, 16, 4), type \"<f8\">\n",
      "<HDF5 dataset \"C00\": shape (502, 16), type \"<f8\">\n",
      "<HDF5 dataset \"C11\": shape (502, 16), type \"<f8\">\n",
      "<HDF5 dataset \"<phi>\": shape (502, 5), type \"<f8\">\n",
      "Type of dset <class 'numpy.ndarray'> (1, 16, 16, 16, 4)\n",
      "Type of c00 <class 'numpy.ndarray'> (502, 16)\n",
      "Type of c11 <class 'numpy.ndarray'> (502, 16)\n",
      "Type of phi <class 'numpy.ndarray'> (502, 5)\n"
     ]
    }
   ],
   "source": [
    "with h5py.File('o4output.h5','r') as output:\n",
    "    print(list(output.keys()))\n",
    "    observables=output[\"Timestepsolution\"]\n",
    "    print(list(observables.keys()))\n",
    "    sol=output[\"Timestepsolution\"][\"solution\"]\n",
    "    c00=output[\"Timestepsolution\"][\"C00\"]\n",
    "    c11=output[\"Timestepsolution\"][\"C11\"]\n",
    "    phi=output[\"Timestepsolution\"][\"<phi>\"]\n",
    "    print(sol)\n",
    "    print(c00)\n",
    "    print(c11)\n",
    "    print(phi)\n",
    "    dset=sol[:,:,:,:]\n",
    "    print(\"Type of dset\", type(dset),dset.shape) \n",
    "    c00=c00[:,:]\n",
    "    print(\"Type of c00\", type(c00),c00.shape)\n",
    "    c11=c11[:,:]\n",
    "    print(\"Type of c11\", type(c11),c11.shape)\n",
    "    phi=phi[:,:]\n",
    "    print(\"Type of phi\", type(phi),phi.shape)\n",
    "    tcenter=dset[2:1001,2,11,5,0:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "going-temperature",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NX = 16\n",
      "NY = 16\n",
      "NZ = 16\n",
      "hX = 6.666667e-02\n",
      "hY = 6.666667e-02\n",
      "hZ = 6.666667e-02\n",
      "initialtime = 0.000000e+00\n",
      "finaltime = 2.000000e+01\n",
      "delta t  = 1.000000e-02\n",
      "seed = 10\n",
      "m2 = -5.000000e+00\n",
      "lambda = 5.000000e+00\n",
      "H = 0.000000e+00\n",
      "filename = filename2\n",
      "Timestep 1: step size = 0.01, time = 0.\n",
      "Timestep 2: step size = 0.01, time = 0.01\n",
      "Timestep 3: step size = 0.01, time = 0.02\n",
      "Timestep 4: step size = 0.01, time = 0.03\n",
      "Timestep 5: step size = 0.01, time = 0.04\n",
      "Timestep 6: step size = 0.01, time = 0.05\n",
      "Timestep 7: step size = 0.01, time = 0.06\n",
      "Timestep 8: step size = 0.01, time = 0.07\n",
      "Timestep 9: step size = 0.01, time = 0.08\n",
      "Timestep 10: step size = 0.01, time = 0.09\n",
      "Timestep 11: step size = 0.01, time = 0.1\n",
      "Timestep 12: step size = 0.01, time = 0.11\n",
      "Timestep 13: step size = 0.01, time = 0.12\n",
      "Timestep 14: step size = 0.01, time = 0.13\n",
      "Timestep 15: step size = 0.01, time = 0.14\n",
      "Timestep 16: step size = 0.01, time = 0.15\n",
      "Timestep 17: step size = 0.01, time = 0.16\n",
      "Timestep 18: step size = 0.01, time = 0.17\n",
      "Timestep 19: step size = 0.01, time = 0.18\n",
      "Timestep 20: step size = 0.01, time = 0.19\n",
      "^C\n"
     ]
    }
   ],
   "source": [
    "for H in range(0,1,1):\n",
    "    seed=int(random.randint(1,2000000))\n",
    "    filename=\"outputH\"+str(H)\n",
    "    !mpiexec -n 1 ModelA-Beuler.exe -o4_data_filename filename -o4_data_filename filename2\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "metropolitan-berkeley",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAKdklEQVR4nO3dX6ik913H8c+3CYlWYZM021qT6iZSChsvLCwV7+rfJkKaknqR3FhqdBHtjVIwJV7UPxc2IopYLYuW9kKTxqiQYKCkxVAvinZTKybUmG1iaWI120YOtMWG6teLMyUny57sZGfOzjnffb1g2DnPPGf2+9sD7x2eZ8481d0BYJZXbXoAANZP3AEGEneAgcQdYCBxBxjo0k0PkCRXX311HzlyZNNjABwojz766Fe6+/DZHtsXcT9y5EhOnjy56TEADpSq+uJujzksAzCQuAMMJO4AA4k7wEDiDjDQ2uNeVddX1Z9V1f3rfm4AlrNU3Kvqw1X1XFU9dsb2G6vqiao6VVV3Jkl3P9Xdd+zFsAAsZ9lX7h9JcuPODVV1SZIPJrkpydEkt1fV0bVOB8B5WSru3f2pJM+fsfktSU4tXqm/kOTeJLcs+xdX1fGqOllVJ0+fPr30wACc2yrH3K9J8qUdXz+T5Jqqek1VfSjJm6vqfbt9c3ef6O5j3X3s8OGz/vYsAOdp7R8/0N1fTfKL635eAJa3yiv3Z5O8YcfX1y62AbBhq8T9M0neWFXXVdVlSW5L8sB6xgJgFcu+FfKeJJ9O8qaqeqaq7ujubyV5T5KPJ/l8kvu6+/G9GxWAZS11zL27b99l+0NJHlrrRACszMcPAAwk7gADbTTuVXVzVZ3Y2tra5BgA42w07t39YHcfP3To0CbHABjHYRmAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEG8huqAAP5DVWAgRyWARhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEG8tkyAAP5bBmAgRyWARhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgXxwGMBAPjgMYCCHZQAGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgXyeO8BAPs8dYCCHZQAGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGcpk9gIFcZg9gIIdlAAYSd4CBxB1gIHEHGEjcAQYSd4CBxB1gIHEHGEjcAQYSd4CBxB1gIHEHGEjcAQYSd4CBxB1gIHEHGEjcAQYSd4CBxB1gIHEHGEjcAQYSd4CBxB1goI3GvapurqoTW1tbmxwDYJyNxr27H+zu44cOHdrkGADjOCwDMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQBuNe1XdXFUntra2NjkGwDgbjXt3P9jdxw8dOrTJMQDGcVgGYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGEneAgcQdYCBxBxhI3AEGunTdT1hV35Xkj5O8kOSR7v7zdf8dALy8pV65V9WHq+q5qnrsjO03VtUTVXWqqu5cbL41yf3d/QtJ3r7meQFYwrKHZT6S5MadG6rqkiQfTHJTkqNJbq+qo0muTfKlxW7/u54xAXgllop7d38qyfNnbH5LklPd/VR3v5Dk3iS3JHkm24F/2eevquNVdbKqTp4+ffqVTw7ArlY5oXpNXnyFnmxH/Zokf53knVX1J0ke3O2bu/tEdx/r7mOHDx9eYQwAzrT2E6rd/fUk71738wKwvFVeuT+b5A07vr52sQ2ADVsl7p9J8saquq6qLktyW5IH1jMWAKtY9q2Q9yT5dJI3VdUzVXVHd38ryXuSfDzJ55Pc192P792oACxrqWPu3X37LtsfSvLQWicCYGU+fgBgIHEHGGijca+qm6vqxNbW1ibHABinunvTM6SqTif54qbnOA9XJ/nKpoe4wC62NV9s602s+SD5/u4+62+B7ou4H1RVdbK7j216jgvpYlvzxbbexJqncMwdYCBxBxhI3FdzYtMDbMDFtuaLbb2JNY/gmDvAQF65Awwk7gADifs5VNVVVfVwVT25+PPKXfZ712KfJ6vqXWd5/IEzr0G7H62y3qp6dVX9bVX9a1U9XlW/c2Gnf2V2uQbwzscvr6qPLR7/h6o6suOx9y22P1FVb7ugg6/gfNdcVT9ZVY9W1b8s/vyxCz78eVrl57x4/Puq6mtV9d4LNvQ6dLfby9yS3J3kzsX9O5N84Cz7XJXkqcWfVy7uX7nj8VuT/EWSxza9nr1cb5JXJ/nRxT6XJfn7JDdtek27rPOSJF9Icv1i1n9OcvSMfX4pyYcW929L8rHF/aOL/S9Pct3ieS7Z9Jr2eM1vTvK9i/s/mOTZTa9nr9e84/H7k/xlkvduej2v5OaV+7ndkuSji/sfTfKOs+zztiQPd/fz3f3fSR7O4oLiVfXdSX41yW/v/ahrcd7r7e5vdPffJUlvX1f3s3nxerr7zW7XAN5p57/F/Ul+vKpqsf3e7v5mdz+d5NTi+fa7815zd/9Td//HYvvjSb6zqi6/IFOvZpWfc6rqHUmezvaaDxRxP7fXdfeXF/f/M8nrzrLPbteTTZLfSvJ7Sb6xZxOu16rrTZJU1RVJbk7yyT2YcR3OuYad+/T29Qu2krxmye/dj1ZZ807vTPLZ7v7mHs25Tue95sULs19L8hsXYM61W/s1VA+iqvpEku85y0N37fyiu7uqln7vaFX9UJIf6O5fOfM43ibt1Xp3PP+lSe5J8ofd/dT5Tcl+VFU3JPlAkp/a9CwXwPuT/H53f23xQv5AEfck3f0Tuz1WVf9VVa/v7i9X1euTPHeW3Z5N8tYdX1+b5JEkP5LkWFX9e7b/rV9bVY9091uzQXu43m87keTJ7v6D1afdM8tcA/jb+zyz+A/rUJKvLvm9+9Eqa05VXZvkb5L8bHd/Ye/HXYtV1vzDSX6mqu5OckWS/6uq/+nuP9rzqddh0wf99/stye/mpScY7z7LPldl+7jclYvb00muOmOfIzkYJ1RXWm+2zy38VZJXbXot51jnpdk+EXxdXjzRdsMZ+/xyXnqi7b7F/Rvy0hOqT+VgnFBdZc1XLPa/ddPruFBrPmOf9+eAnVDd+AD7/Zbt442fTPJkkk/siNixJH+6Y7+fy/aJtVNJ3n2W5zkocT/v9Wb7VVFn+5q6n1vcfn7Ta3qZtf50kn/L9rsp7lps+80kb1/c/45sv0viVJJ/THL9ju+9a/F9T2SfviNonWtO8utJvr7j5/q5JK/d9Hr2+ue84zkOXNx9/ADAQN4tAzCQuAMMJO4AA4k7wEDiDjCQuAMMJO4AA/0/6h9Q+xuJiV0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(tcenter)\n",
    "plt.yscale('log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "structural-likelihood",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0e9fcea905764356b6e2023ff1f33cd4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=2, description='i', max=4), Output()), _dom_classes=('widget-interact',)…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def g(i):\n",
    "    plt.plot(phi[:,i])\n",
    "   \n",
    "    plt.show()\n",
    "\n",
    "interactive_plot = interactive(g, i=(0,4,1))\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "expensive-prototype",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d55a2acb35e34127b4e3ca421c04f88f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=7, description='i', max=15), Output()), _dom_classes=('widget-interact',…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def t(i):\n",
    "    plt.plot(c00[:,i])\n",
    "   \n",
    "    plt.show()\n",
    "\n",
    "interactive_plot = interactive(t, i=(0,15,1))\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "phantom-border",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2266956025d446f48e86a628e37a5e76",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=500, description='i', max=1000), Output()), _dom_classes=('widget-intera…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def h(i):\n",
    "    plt.plot(c11[i,:])\n",
    "   \n",
    "    plt.show()\n",
    "\n",
    "interactive_plot = interactive(h, i=(0,1000,1))\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "rising-discharge",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c624a6cbe2044e7fbbdc1564064d3982",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=750, description='i', max=800, min=700), Output()), _dom_classes=('widge…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def f(i):\n",
    "    plt.contourf(dset[i,:,:,8,1])\n",
    "   \n",
    "    plt.show()\n",
    "\n",
    "interactive_plot = interactive(f, i=(700,800,1))\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "blank-advice",
   "metadata": {},
   "source": [
    "### "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "marked-tuition",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] Unable to open file (unable to open file: name = 'output.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-64-b9ef0879eb55>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'output.h5'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mnoise\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"/noise\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prova\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Type of sol\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mrumore\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mnoise\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/jupyterlab/3.0.9/libexec/lib/python3.9/site-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, **kwds)\u001b[0m\n\u001b[1;32m    440\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mphil\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m                 \u001b[0mfapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fapl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_nslots\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_nbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_w0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 442\u001b[0;31m                 fid = make_fid(name, mode, userblock_size,\n\u001b[0m\u001b[1;32m    443\u001b[0m                                fapl, fcpl=make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n\u001b[1;32m    444\u001b[0m                                fs_persist=fs_persist, fs_threshold=fs_threshold),\n",
      "\u001b[0;32m/usr/local/Cellar/jupyterlab/3.0.9/libexec/lib/python3.9/site-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 195\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    196\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = 'output.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
     ]
    }
   ],
   "source": [
    "with h5py.File('output.h5','r') as output:\n",
    "    print(list(output.keys()))\n",
    "    noise=output[\"/noise\"][\"prova\"]\n",
    "    print(\"Type of sol\", type(noise),noise.shape) \n",
    "    rumore= noise[:,1,1,1]\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "decent-lemon",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1128c3d90>]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(rumore)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "moral-bullet",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x10f07dca0>,\n",
       " <matplotlib.lines.Line2D at 0x10f24b790>,\n",
       " <matplotlib.lines.Line2D at 0x10f24b550>,\n",
       " <matplotlib.lines.Line2D at 0x10f24ba90>]"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(tcenter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "deadly-soccer",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
